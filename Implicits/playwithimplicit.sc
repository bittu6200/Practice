import scala.reflect.io.Path.extension

case class Circle(x:Double,y:Double,radius:Double)

object A{
  def circumference(c:Circle):Double=2*Math.PI*c.radius
}
var circle=Circle(2,3,5)

A.circumference(circle)

/////////////////////////////////////////////////

//extension (ll: Circle)
//def circumference: Double = ll.radius * math.Pi * 2
//def area : Double=2*Math.PI*r


object Helpers {
  implicit class IntWithTimes(x: Int) {
    def times[A](f: => A): Unit = {
      def loop(current: Int): Unit =
        if(current > 0) {
          f
          loop(current - 1)
        }
      loop(x)
    }
  }
}

//implicit class RichDouble(x: Double) // BAD!

class mam{
  implicit class A(val p:Double)(implicit q:String)
  //implicit class A(val p:Double,implicit l:String)

}
//////////////////////////////


  implicit class StringUtils(str: String) {

    def capitalizeEachWord(): String = str.split(" ").map(word => word.capitalize).mkString(" ")
  }
//Note : // Automatically generated by the comiler
//implicit def StringUtils(str: String) = new StringUtils(str)
//And when we call the capitalizeEachWord() method this is how the
// actual call is made under the hood.

//  println(StringUtils(inputString).capitalizeEachWord())

val inputString = "my name is prakhar" //
println(inputString.capitalizeEachWord())
///////////////////////////////////////////////////////

